@startuml classes_MyProject
set namespaceSeparator none
class "AstrophysicalSources" as modules.core.astrophysical.AstrophysicalSources {
  config : ConfigParser
  spectra : dict
  unit_converter
  calculate_incident_flux(source_name: str, null: bool, plot: bool) -> np.ndarray
}
class "ConfigValidator" as modules.config.validator.ConfigValidator {
  required_detector_fields : list
  required_sections : list
  required_target_fields : list
  required_telescope_fields : list
  required_wavelength_fields : list
  validate_config(config: Dict[str, Any]) -> List[str]
}
class "ConversionEngine" as modules.core.conversions.ConversionEngine {
  unit_converter
  calculate_detection_limit(total_noise_adu: np.ndarray, snr_threshold: float) -> np.ndarray
  calculate_integrated_snr(snr_per_wavelength: np.ndarray, wavelength: np.ndarray) -> float
  calculate_optimal_integration_time(astrophysical_noise_rate: float, instrumental_noise: float, target_snr: float) -> float
  calculate_signal_to_noise(signal_adu: np.ndarray, total_noise_adu: np.ndarray) -> np.ndarray
  calculate_total_noise_adu(astrophysical_noise_adu: np.ndarray, instrumental_noise_adu: float) -> np.ndarray
  convert_electrons_to_adu(electrons_per_pixel: np.ndarray, gain: float) -> np.ndarray
  convert_flux_to_electrons(flux_photons_per_sec_m2_um: np.ndarray, collecting_area: float, throughput: float, pixel_area_sr: float, integration_time: float) -> np.ndarray
}
class "InstrumentalSources" as modules.core.instrumental.InstrumentalSources {
  add_astrophysical_flux : bool
  config : Dict
  exoplanet_flux : dict
  instrum_dict : dict
  prop_dict : dict
  star_flux : dict
  unit_converter
  calculate_instrinsic_instrumental_noise()
  e_to_adu()
  pass_through_aperture()
  photons_to_e()
}
class "NoiseCalculator" as modules.core.calculator.NoiseCalculator {
  config : Dict
  noise_origin
  calculate_snr(contrib_astro: Dict, contrib_instrum: Dict) -> Dict[str, Any]
  s2n_e()
}
class "SpectralData" as modules.data.spectra.SpectralData {
  flux : ndarray
  flux_unit : str
  metadata : Dict[str, any], dict
  source_name : str
  wavelength : ndarray
  wavelength_unit : str
  get_flux_at_wavelength(wavelength: float) -> float
  integrate_flux(wavelength_min: float, wavelength_max: float) -> float
  interpolate(new_wavelength: np.ndarray) -> 'SpectralData'
}
class "UnitConverter" as modules.data.units.UnitConverter {
  adu_to_electrons(adu: float, gain: float) -> float
  convert_flux(value: float, wavelength: float, from_unit: str, to_unit: str) -> float
  convert_wavelength(value: float, from_unit: str, to_unit: str) -> float
  electrons_to_adu(electrons: float, gain: float) -> float
}
modules.core.instrumental.InstrumentalSources --o modules.core.calculator.NoiseCalculator : noise_origin
modules.data.units.UnitConverter --o modules.core.astrophysical.AstrophysicalSources : unit_converter
modules.data.units.UnitConverter --o modules.core.conversions.ConversionEngine : unit_converter
modules.data.units.UnitConverter --o modules.core.instrumental.InstrumentalSources : unit_converter
@enduml
